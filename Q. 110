110. Balanced Binary Tree

Given a binary tree, determine if it is height-balanced.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>

struct node{
    int data;
    struct node* left;
    struct node* right;
};

struct node* create(int data){
    struct node* newnode = (struct node*)malloc(sizeof(struct node));
    newnode->data = data;
    newnode->left = NULL;
    newnode->right = NULL;
    return newnode;
}

struct node* insert(struct node* root, int data){
    if(root == NULL) return create(data);
    if(data > root->data) root->right = insert(root->right, data);
    else root->left = insert(root->left, data);
    return root;
}

int balanceht(struct node* root){
    if(root==NULL) return 0;
    int leftht = balanceht(root->left);
    int rightht = balanceht(root->right);
    
    if(leftht==-1 || rightht==-1) return -1;
    if(abs(leftht-rightht) > 1) return -1;
    
    return (leftht > rightht ? leftht : rightht) + 1;
}

int main(){
    int n;
    scanf("%d", &n);
    struct node* root = NULL;
    for(int i=0; i<n; i++){
        int data;
        scanf("%d", &data);
        root = insert(root, data);
    }
    if(balanceht(root)!= -1) printf("true");
    else printf("false");
    return 0;
}
